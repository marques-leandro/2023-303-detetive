{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/marques-leandro/2023-303-detetive/blob/main/labs/lab02/Laborat%C3%B3rio%2002%3A%20Visualiza%C3%A7%C3%B5es%20de%20Dados%20e%20Fun%C3%A7%C3%B5es%20Python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L5Mc_-g6apUI"
      },
      "source": [
        "# Laborat√≥rio 2: Visualiza√ß√µes de Dados e Fun√ß√µes Python\n",
        "\n",
        "Bem-vindo ao Laborat√≥rio 2! Esta semana voc√™ praticar√° alguns m√©todos DataFrame (especialmente `groupby`), criar√° visualiza√ß√µes de dados e aprender√° como escrever suas pr√≥prias fun√ß√µes em Python. Criar fun√ß√µes pode ser uma novidade para voc√™, mas n√£o se preocupe, esta tarefa ir√° gui√°-lo nesse processo! Voc√™ deve concluir todo este laborat√≥rio e envi√°-lo ao **Moodle** at√© √†s **23h59** da data de vencimento.\n",
        "\n",
        "Os t√≥picos deste laborat√≥rio s√£o abordados em [BPD 6](https://notes.dsc10.com/01-getting_started/functions-defining.html), [11](https://notes.dsc10.com/02-data_sets/groupby.html), [12](https://notes.dsc10.com/02-data_sets/apply.html) nas notas de `babypandas` e no [Chapter 7](https://inferentialthinking.com/chapters/07/Visualization.html) do livro texto.\n",
        "\n",
        "\n",
        "**N√£o use loops for em nenhuma pergunta deste laborat√≥rio.** Se voc√™ n√£o sabe o que √© um loop for, n√£o se preocupe: ainda n√£o abordamos isso. Mas se voc√™ sabe o que eles s√£o e est√° se perguntando por que n√£o √© correto us√°-los, √© porque os loops em Python s√£o lentos e os loops em arrays e DataFrames geralmente devem ser evitados.\n",
        "\n",
        "Primeiro, configure os testes e importa√ß√µes executando a c√©lula abaixo."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Descomente para executar no Colab\n",
        "# ! pip install babypandas --quiet"
      ],
      "metadata": {
        "id": "KmPbfvl3auR4"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "EjDQdGmFapUL"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Aqui configuramos a biblioteca de visualiza√ß√£o de dados.\n",
        "import matplotlib.pyplot as plt\n",
        "plt.style.use('ggplot')\n",
        "plt.rcParams['figure.figsize'] = (10, 6)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dsdjskgEapUM"
      },
      "source": [
        "## 1. Aplicativos da Google Play Store üì≤"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fz2ffKsmapUM"
      },
      "source": [
        "Neste problema, praticaremos manipula√ß√µes de DataFrame e visualiza√ß√µes de dados, enquanto exploramos o [Google Play Store Apps Dataset](https://www.kaggle.com/lava18/google-play-store-apps), extra√≠do da Google Play Store."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "ZUDpEUhxapUN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 528
        },
        "outputId": "43c6c45c-85ee-40c6-ba35-57f4c5ced312"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                     App             Category  \\\n",
              "0         Photo Editor & Candy Camera & Grid & ScrapBook       ART_AND_DESIGN   \n",
              "1                                    Coloring book moana       ART_AND_DESIGN   \n",
              "2      U Launcher Lite ‚Äì FREE Live Cool Themes, Hide ...       ART_AND_DESIGN   \n",
              "3                                  Sketch - Draw & Paint       ART_AND_DESIGN   \n",
              "4                  Pixel Draw - Number Art Coloring Book       ART_AND_DESIGN   \n",
              "...                                                  ...                  ...   \n",
              "10820                                   Sya9a Maroc - FR               FAMILY   \n",
              "10821                   Fr. Mike Schmitz Audio Teachings               FAMILY   \n",
              "10822                             Parkinson Exercices FR              MEDICAL   \n",
              "10823                      The SCP Foundation DB fr nn5n  BOOKS_AND_REFERENCE   \n",
              "10824      iHoroscope - 2018 Daily Horoscope & Astrology            LIFESTYLE   \n",
              "\n",
              "       Rating  Reviews                Size    Installs  Type Price  \\\n",
              "0         4.1      159                 19M     10000.0  Free     0   \n",
              "1         3.9      967                 14M    500000.0  Free     0   \n",
              "2         4.7    87510                8.7M   5000000.0  Free     0   \n",
              "3         4.5   215644                 25M  50000000.0  Free     0   \n",
              "4         4.3      967                2.8M    100000.0  Free     0   \n",
              "...       ...      ...                 ...         ...   ...   ...   \n",
              "10820     4.5       38                 53M      5000.0  Free     0   \n",
              "10821     5.0        4                3.6M       100.0  Free     0   \n",
              "10822     NaN        3                9.5M      1000.0  Free     0   \n",
              "10823     4.5      114  Varies with device      1000.0  Free     0   \n",
              "10824     4.5   398307                 19M  10000000.0  Free     0   \n",
              "\n",
              "      Content Rating                     Genres  \n",
              "0           Everyone               Art & Design  \n",
              "1           Everyone  Art & Design;Pretend Play  \n",
              "2           Everyone               Art & Design  \n",
              "3               Teen               Art & Design  \n",
              "4           Everyone    Art & Design;Creativity  \n",
              "...              ...                        ...  \n",
              "10820       Everyone                  Education  \n",
              "10821       Everyone                  Education  \n",
              "10822       Everyone                    Medical  \n",
              "10823     Mature 17+          Books & Reference  \n",
              "10824       Everyone                  Lifestyle  \n",
              "\n",
              "[10825 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89030450-877e-4843-aa32-bec5d8c28e44\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>App</th>\n",
              "      <th>Category</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Size</th>\n",
              "      <th>Installs</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Content Rating</th>\n",
              "      <th>Genres</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Photo Editor &amp; Candy Camera &amp; Grid &amp; ScrapBook</td>\n",
              "      <td>ART_AND_DESIGN</td>\n",
              "      <td>4.1</td>\n",
              "      <td>159</td>\n",
              "      <td>19M</td>\n",
              "      <td>10000.0</td>\n",
              "      <td>Free</td>\n",
              "      <td>0</td>\n",
              "      <td>Everyone</td>\n",
              "      <td>Art &amp; Design</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Coloring book moana</td>\n",
              "      <td>ART_AND_DESIGN</td>\n",
              "      <td>3.9</td>\n",
              "      <td>967</td>\n",
              "      <td>14M</td>\n",
              "      <td>500000.0</td>\n",
              "      <td>Free</td>\n",
              "      <td>0</td>\n",
              "      <td>Everyone</td>\n",
              "      <td>Art &amp; Design;Pretend Play</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>U Launcher Lite ‚Äì FREE Live Cool Themes, Hide ...</td>\n",
              "      <td>ART_AND_DESIGN</td>\n",
              "      <td>4.7</td>\n",
              "      <td>87510</td>\n",
              "      <td>8.7M</td>\n",
              "      <td>5000000.0</td>\n",
              "      <td>Free</td>\n",
              "      <td>0</td>\n",
              "      <td>Everyone</td>\n",
              "      <td>Art &amp; Design</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Sketch - Draw &amp; Paint</td>\n",
              "      <td>ART_AND_DESIGN</td>\n",
              "      <td>4.5</td>\n",
              "      <td>215644</td>\n",
              "      <td>25M</td>\n",
              "      <td>50000000.0</td>\n",
              "      <td>Free</td>\n",
              "      <td>0</td>\n",
              "      <td>Teen</td>\n",
              "      <td>Art &amp; Design</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Pixel Draw - Number Art Coloring Book</td>\n",
              "      <td>ART_AND_DESIGN</td>\n",
              "      <td>4.3</td>\n",
              "      <td>967</td>\n",
              "      <td>2.8M</td>\n",
              "      <td>100000.0</td>\n",
              "      <td>Free</td>\n",
              "      <td>0</td>\n",
              "      <td>Everyone</td>\n",
              "      <td>Art &amp; Design;Creativity</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10820</th>\n",
              "      <td>Sya9a Maroc - FR</td>\n",
              "      <td>FAMILY</td>\n",
              "      <td>4.5</td>\n",
              "      <td>38</td>\n",
              "      <td>53M</td>\n",
              "      <td>5000.0</td>\n",
              "      <td>Free</td>\n",
              "      <td>0</td>\n",
              "      <td>Everyone</td>\n",
              "      <td>Education</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10821</th>\n",
              "      <td>Fr. Mike Schmitz Audio Teachings</td>\n",
              "      <td>FAMILY</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4</td>\n",
              "      <td>3.6M</td>\n",
              "      <td>100.0</td>\n",
              "      <td>Free</td>\n",
              "      <td>0</td>\n",
              "      <td>Everyone</td>\n",
              "      <td>Education</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10822</th>\n",
              "      <td>Parkinson Exercices FR</td>\n",
              "      <td>MEDICAL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>9.5M</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>Free</td>\n",
              "      <td>0</td>\n",
              "      <td>Everyone</td>\n",
              "      <td>Medical</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10823</th>\n",
              "      <td>The SCP Foundation DB fr nn5n</td>\n",
              "      <td>BOOKS_AND_REFERENCE</td>\n",
              "      <td>4.5</td>\n",
              "      <td>114</td>\n",
              "      <td>Varies with device</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>Free</td>\n",
              "      <td>0</td>\n",
              "      <td>Mature 17+</td>\n",
              "      <td>Books &amp; Reference</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10824</th>\n",
              "      <td>iHoroscope - 2018 Daily Horoscope &amp; Astrology</td>\n",
              "      <td>LIFESTYLE</td>\n",
              "      <td>4.5</td>\n",
              "      <td>398307</td>\n",
              "      <td>19M</td>\n",
              "      <td>10000000.0</td>\n",
              "      <td>Free</td>\n",
              "      <td>0</td>\n",
              "      <td>Everyone</td>\n",
              "      <td>Lifestyle</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10825 rows √ó 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89030450-877e-4843-aa32-bec5d8c28e44')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-89030450-877e-4843-aa32-bec5d8c28e44 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-89030450-877e-4843-aa32-bec5d8c28e44');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-869532d9-60bc-4308-8b43-98e2ac3f2286\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-869532d9-60bc-4308-8b43-98e2ac3f2286')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-869532d9-60bc-4308-8b43-98e2ac3f2286 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_1633bd85-cefe-4a04-9aaf-1c0c4be8b004\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('apps')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1633bd85-cefe-4a04-9aaf-1c0c4be8b004 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('apps');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "apps",
              "summary": "{\n  \"name\": \"apps\",\n  \"rows\": 10825,\n  \"fields\": [\n    {\n      \"column\": \"App\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9644,\n        \"samples\": [\n          \"DG \\u0917\\u094d\\u0930\\u093e\\u092e / Digital Gram Panchayat\",\n          \"Once Upon a Tower\",\n          \"Truck Chat & CB for Truckers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 33,\n        \"samples\": [\n          \"NEWS_AND_MAGAZINES\",\n          \"LIBRARIES_AND_DEMO\",\n          \"PERSONALIZATION\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5152188586177868,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 39,\n        \"samples\": [\n          2.4,\n          1.4,\n          4.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reviews\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2929741,\n        \"min\": 0,\n        \"max\": 78158306,\n        \"num_unique_values\": 6001,\n        \"samples\": [\n          66661,\n          7479,\n          8978\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 461,\n        \"samples\": [\n          \"746k\",\n          \"9.4M\",\n          \"35M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Installs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 85086308.06602074,\n        \"min\": 1.0,\n        \"max\": 1000000000.0,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          10000.0,\n          50000.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Paid\",\n          \"Free\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 88,\n        \"samples\": [\n          \"$3.28\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Content Rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Everyone\",\n          \"Teen\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Genres\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 119,\n        \"samples\": [\n          \"Educational;Education\",\n          \"Travel & Local\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "# Run this cell to load in the dataset\n",
        "apps = pd.read_csv('https://raw.githubusercontent.com/dsc-courses/dsc10-2023-wi/main/labs/lab02/data/googleplaystore.csv')\n",
        "apps"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bmVEClSZapUN"
      },
      "source": [
        "Cada linha no DataFrame corresponde a um aplicativo. Aqui est√£o as descri√ß√µes de algumas das colunas.\n",
        "- `'Category'`: Categoria √† qual o aplicativo pertence.\n",
        "- `'Rating'`: Avalia√ß√£o geral do usu√°rio do aplicativo em 5 (no momento da recupera√ß√£o de dados).\n",
        "- `'Reviews'`: N√∫mero de avalia√ß√µes de usu√°rios sobre o aplicativo (no momento da recupera√ß√£o dos dados).\n",
        "- `'Installs'`: ‚Äã‚ÄãN√∫mero de downloads/instala√ß√µes do usu√°rio para o aplicativo (no momento da recupera√ß√£o dos dados).\n",
        "- `'Content Rating'`: P√∫blico-alvo do aplicativo, como \"Todos\" ou \"Adolescentes\".\n",
        "\n",
        "‚ö†Ô∏è Observe que `'Rating'` e `'Content Rating'` significam coisas diferentes. N√£o os confunda!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gfSeQF57apUN"
      },
      "source": [
        "Observe que n√£o definimos o √≠ndice do DataFrame, embora pare√ßa que o nome do aplicativo seria um bom candidato. Mas os nomes dos aplicativos n√£o s√£o exclusivos! Podemos verificar isso com a ajuda do m√©todo Series `.unique()`. Quando chamado em uma S√©rie, este m√©todo retorna um array de todos os valores distintos da S√©rie, sem duplicatas.\n",
        "\n",
        "Vemos acima que o DataFrame possui 10.825 linhas. Isso significa que existem 10.825 aplicativos no conjunto de dados. Mas vamos calcular quantos nomes de aplicativos exclusivos existem:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "GlhATg3eapUO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a03471bd-222b-44a4-f1d6-5c97d5b6e24d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9644"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "len(apps.get('App').unique())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O9h6auPoapUO"
      },
      "source": [
        "Como $9644 <10825$, deve haver duplicatas!\n",
        "\n",
        "Como existem duplicatas, o nome do aplicativo n√£o √© um bom r√≥tulo de linha. Na verdade, n√£o existe um bom r√≥tulo de linha neste caso. Em situa√ß√µes como essa, deixaremos o √≠ndice como est√°."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "deletable": false,
        "editable": false,
        "id": "OuWTvQ2GapUO"
      },
      "source": [
        "**Pergunta 1.1.** Voc√™ pode pensar que, em uma escala de 1 a 5, um aplicativo intermedi√°rio t√≠pico deveria ter uma classifica√ß√£o de cerca de 3.\n",
        "Fa√ßa um histograma da coluna `'Rating'` para ver se √© esse o caso."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "scrolled": true,
        "id": "zIpAl59SapUO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 586
        },
        "outputId": "40e4b4a1-b355-48e3-bff4-ab30656a087f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Frequ√™ncia')"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Crie o histograma aqui.\n",
        "plt.hist(apps[\"Rating\"])\n",
        "plt.title(\"Distribui√ß√£o das Avalia√ß√µes de Aplicativos\")\n",
        "plt.xlabel(\"Avalia√ß√£o (Rating)\")\n",
        "plt.ylabel(\"Frequ√™ncia\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bkuj9nfTapUO"
      },
      "source": [
        "Certamente parece haver muitos aplicativos excelentes por a√≠! Seria interessante ver se os aplicativos com classifica√ß√µes mais altas tamb√©m t√™m mais avalia√ß√µes.\n",
        "\n",
        "**Pergunta 1.2.** Que tipo de gr√°fico voc√™ gostaria de criar para ajudar a determinar se os aplicativos com classifica√ß√£o mais alta tamb√©m t√™m mais avalia√ß√µes? Atribua 1, 2, 3 ou 4 ao nome `plot_type` abaixo.\n",
        "\n",
        "1. gr√°fico de dispers√£o\n",
        "2. gr√°fico de linha\n",
        "3. gr√°fico de barras\n",
        "4. histograma"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "y0Tgjv0BapUP"
      },
      "outputs": [],
      "source": [
        "plot_type = 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "deletable": false,
        "editable": false,
        "id": "C_v3AWm3apUP"
      },
      "source": [
        "**Pergunta 1.3.** Agora crie o gr√°fico identificado acima para ajud√°-lo a determinar se os aplicativos com classifica√ß√£o mais alta tamb√©m t√™m mais avalia√ß√µes.\n",
        "\n",
        "<!--\n",
        "COME√áAR PERGUNTA\n",
        "nome: q1_3\n",
        "-->"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 114,
      "metadata": {
        "id": "-0Yk0ywtapUP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 587
        },
        "outputId": "fc1c5296-9d3e-49a1-9a61-1b15110ea7ef"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'N√∫mero de Avalia√ß√µes')"
            ]
          },
          "metadata": {},
          "execution_count": 114
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plot_type = apps.groupby('Rating')['Reviews'].size().reset_index(name = \"ReviewCount\")\n",
        "plot_type.plot.scatter(x='Rating', y='ReviewCount', color='blue')\n",
        "plt.title(\"Classifica√ß√£o vs N√∫mero de Avalia√ß√µes\")\n",
        "plt.xlabel(\"Classifica√ß√£o (Rating)\")\n",
        "plt.ylabel(\"N√∫mero de Avalia√ß√µes\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ylg7ZYC2apUP"
      },
      "source": [
        "**Pergunta 1.4.** Qual das seguintes afirma√ß√µes podemos concluir, com base nestes dados? Atribua 1, 2, 3 ou 4 ao nome `plot_conclusion` abaixo.\n",
        "\n",
        "1. Os aplicativos com classifica√ß√µes mais altas tornam-se mais populares e, como mais pessoas est√£o usando esses aplicativos, mais avalia√ß√µes s√£o fornecidas.\n",
        "2. Os aplicativos com mais avalia√ß√µes tornam-se mais populares e, como mais pessoas est√£o usando esses aplicativos, s√£o atribu√≠das classifica√ß√µes mais altas.\n",
        "3. 1 e 2.\n",
        "4. Nem 1 nem 2."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "vh1c0SUAapUP"
      },
      "outputs": [],
      "source": [
        "plot_conclusion = 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hP07EC_eapUP"
      },
      "source": [
        "**Pergunta 1.5.** Atribua o nome `by_content` a um DataFrame que conte o n√∫mero de aplicativos por `'Content Rating'`, indexados por `'Content Rating'`.\n",
        "\n",
        "*Dica*: Para manter apenas certas colunas em um DataFrame, chame `.get` com uma lista de nomes de colunas que voc√™ deseja manter."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 118,
      "metadata": {
        "scrolled": true,
        "id": "yXnYq2VbapUQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "outputId": "11fe4d80-1a3c-4958-84b0-814db6d7925b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 App count\n",
              "Content Rating            \n",
              "Adults only 18+          3\n",
              "Everyone              8702\n",
              "Everyone 10+           413\n",
              "Mature 17+             499\n",
              "Teen                  1206\n",
              "Unrated                  2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-80842066-9642-4b14-b684-a1e519206c25\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>App count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Content Rating</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Adults only 18+</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Everyone</th>\n",
              "      <td>8702</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Everyone 10+</th>\n",
              "      <td>413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mature 17+</th>\n",
              "      <td>499</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Teen</th>\n",
              "      <td>1206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Unrated</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-80842066-9642-4b14-b684-a1e519206c25')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-80842066-9642-4b14-b684-a1e519206c25 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-80842066-9642-4b14-b684-a1e519206c25');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0986176d-360f-45c9-8e34-7c66ac8610ac\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0986176d-360f-45c9-8e34-7c66ac8610ac')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0986176d-360f-45c9-8e34-7c66ac8610ac button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_342c4abf-3e3c-42e5-9909-4a2a44288d24\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('by_content')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_342c4abf-3e3c-42e5-9909-4a2a44288d24 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('by_content');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "by_content",
              "summary": "{\n  \"name\": \"by_content\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Content Rating\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Adults only 18+\",\n          \"Everyone\",\n          \"Unrated\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"App count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3407,\n        \"min\": 2,\n        \"max\": 8702,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          8702,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 118
        }
      ],
      "source": [
        "by_content = apps.get([\"Content Rating\"]).groupby(\"Content Rating\").size().to_frame(name= \"App count\")\n",
        "by_content"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YLTeEUz0apUQ"
      },
      "source": [
        "**Pergunta 1.6.** Crie um DataFrame chamado `install_stats` que possui uma √∫nica coluna, `'Installs'`, que cont√©m o n√∫mero m√©dio de `'Installs'` para cada tipo de classifica√ß√£o de conte√∫do. N√£o h√° problema se as respostas forem exibidas em nota√ß√£o cient√≠fica."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "qNFWEShfapUQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "outputId": "98169bd2-2062-424a-b6e2-5b2ebc68251f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Content Rating\n",
              "Adults only 18+    6.666667e+05\n",
              "Everyone           1.311844e+07\n",
              "Everyone 10+       3.204330e+07\n",
              "Mature 17+         1.107112e+07\n",
              "Teen               2.878636e+07\n",
              "Unrated            2.525000e+04\n",
              "Name: Installs, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Installs</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Content Rating</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Adults only 18+</th>\n",
              "      <td>6.666667e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Everyone</th>\n",
              "      <td>1.311844e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Everyone 10+</th>\n",
              "      <td>3.204330e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mature 17+</th>\n",
              "      <td>1.107112e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Teen</th>\n",
              "      <td>2.878636e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Unrated</th>\n",
              "      <td>2.525000e+04</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "install_stats = apps.groupby('Content Rating')['Installs'].mean()\n",
        "install_stats"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mFsuV3C8apUQ"
      },
      "source": [
        "**Pergunta 1.7.** Crie um DataFrame chamado `top_communication_apps_by_content_rating` que contenha, para cada `'Content Rating'` √∫nico, o n√∫mero de aplicativos que atendem a ambas as condi√ß√µes:\n",
        "\n",
        "- `'Category'` √© `'COMMUNICATION'`.\n",
        "- `'Rating'` est√° entre 4 e 5 (inclusive).\n",
        "\n",
        "A estrutura de `top_communication_apps_by_content_rating` deve ser a seguinte:\n",
        "\n",
        "- Deve ter apenas uma coluna, `'Top_Comm_Apps'`.\n",
        "- Deve ser ordenado por `'Top_Comm_Apps'` em ordem decrescente.\n",
        "\n",
        "*Dica:* Voc√™ pode fazer isso como quiser, mas uma maneira de proceder √©:\n",
        "\n",
        "1. Criar um √∫nico DataFrame que contenha apenas as linhas que correspondam √†s condi√ß√µes especificadas\n",
        "2. Chamar a fun√ß√£o `groupby` no DataFrame obtido anteriormente.\n",
        "3. Ordenar o DataFrame da etapa 2, al√©m de usar as fun√ß√µes `assign` e `drop` para renomear a coluna `'App'` para `'Top_Comm_Apps'`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 131,
      "metadata": {
        "id": "rFTt_qnPapUQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "ce2f7711-cfb8-44c1-d1e8-d73d600d428c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Top_Comm_Apps\n",
              "Content Rating               \n",
              "Everyone                  238\n",
              "Teen                       22\n",
              "Mature 17+                  8"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-47211297-c357-4621-95f3-3ce104506ec0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Top_Comm_Apps</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Content Rating</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Everyone</th>\n",
              "      <td>238</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Teen</th>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mature 17+</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-47211297-c357-4621-95f3-3ce104506ec0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-47211297-c357-4621-95f3-3ce104506ec0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-47211297-c357-4621-95f3-3ce104506ec0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3dd6c096-3ba8-48e0-9d66-ea152cc861b9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3dd6c096-3ba8-48e0-9d66-ea152cc861b9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3dd6c096-3ba8-48e0-9d66-ea152cc861b9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_428fd05a-21e8-4d5d-9d7d-5eadc0df4375\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('top_communication_apps_by_content_rating')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_428fd05a-21e8-4d5d-9d7d-5eadc0df4375 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('top_communication_apps_by_content_rating');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top_communication_apps_by_content_rating",
              "summary": "{\n  \"name\": \"top_communication_apps_by_content_rating\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Content Rating\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Everyone\",\n          \"Teen\",\n          \"Mature 17+\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Top_Comm_Apps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128,\n        \"min\": 8,\n        \"max\": 238,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          238,\n          22,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 131
        }
      ],
      "source": [
        "top_communication_apps_by_content_rating = (\n",
        "    apps[(apps['Category'] == 'COMMUNICATION') & (apps['Rating'].between(4, 5))]\n",
        "    .groupby('Content Rating')\n",
        "    .size()\n",
        "    .sort_values(ascending=False)\n",
        "    .to_frame(name = 'Top_Comm_Apps')\n",
        ")\n",
        "top_communication_apps_by_content_rating"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RdL0DmXXapUR"
      },
      "source": [
        "**Pergunta 1.8.** Suponha que um bom aplicativo seja aquele com pelo menos um milh√£o de instala√ß√µes e uma classifica√ß√£o de pelo menos 4,0. Crie uma vari√°vel chamada `best_category` contendo o nome da categoria com o maior n√∫mero de aplicativos bons.\n",
        "\n",
        "_Nota:_ Sua resposta deve ser gerada usando c√≥digo ‚Äì n√£o codificando uma string! (Em outras palavras, n√£o escreva `best_category = \"DATING\"` se voc√™ acha que essa √© a melhor categoria)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {
        "id": "D_t-3NljapUR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "outputId": "a524c293-2516-438e-d862-037fa250574c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Good Apps Count    GAME\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Good Apps Count</th>\n",
              "      <td>GAME</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ],
      "source": [
        "# Bom aplicativo\n",
        "# => pelo menos um milh√£o de instala√ß√µes\n",
        "# => uma classifica√ß√£o de pelo menos 4\n",
        "\n",
        "good_apps = apps[(apps['Installs']>= 1000000) & (apps['Rating']>=4)]\n",
        "category_count = good_apps.groupby(\"Category\").size().to_frame(name='Good Apps Count')\n",
        "best_category = category_count.idxmax()\n",
        "best_category"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4t2rYquTapUR"
      },
      "source": [
        "**Pergunta 1.9.** Fa√ßa um gr√°fico de barras da classifica√ß√£o m√©dia por categoria em que as barras s√£o classificadas da menor para a maior. Seu resultado deve ficar assim:\n",
        "\n",
        "<img src=\"https://raw.githubusercontent.com/dsc-courses/dsc10-2023-wi/main/labs/lab02/data/barchart.jpg\" width=60%/>\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 99,
      "metadata": {
        "id": "RHPDMjmXapUR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 725
        },
        "outputId": "d4ddcc12-f7db-4380-c414-51cfebcd3ef3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Category'>"
            ]
          },
          "metadata": {},
          "execution_count": 99
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Crie seu gr√°fico de barras verticais aqui.\n",
        "# Gr√°fico de barras da classifica√ß√£o m√©dia por categoria\n",
        "average_ratings_by_category = apps.groupby('Category')['Rating'].mean().sort_values()\n",
        "average_ratings_by_category.plot(kind='bar')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-M9kdEkIi9Sn"
      },
      "source": [
        "## 2. Renda dos CEOs üíº\n",
        "\n",
        "No restante deste laborat√≥rio, veremos a remunera√ß√£o de 2015 dos Diretores Executivos (CEOs) das 100 maiores empresas da Calif√≥rnia. Os dados foram compilados para uma an√°lise do [Los Angeles Times ](http://spreadsheets.latimes.com/california-ceo-compensation/) e, em √∫ltima an√°lise, vieram [daqui](http://spreadsheets.latimes.com/california-ceo-compensation/), exigido pela Comiss√£o de Valores Mobili√°rios dos EUA, de todas as empresas de capital aberto. Duas das empresas em nosso conjunto de dados t√™m dois CEOs, portanto h√° 102 CEOs no conjunto de dados.\n",
        "\n",
        "Copiamos os dados da p√°gina do LA Times para um arquivo chamado `raw_compensation.csv`. A p√°gina observa que todos os valores em d√≥lares est√£o em milh√µes de d√≥lares."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 100,
      "metadata": {
        "id": "GPNNu-Sgi9Sn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "outputId": "1495fd18-f792-4d57-eb63-8fb1983c4e99"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    Name                 Company (Headquarters) Total Pay  \\\n",
              "Rank                                                                        \n",
              "1          Mark V. Hurd*                  Oracle (Redwood City)   $53.25    \n",
              "2         Safra A. Catz*                  Oracle (Redwood City)   $53.24    \n",
              "3         Robert A. Iger                  Walt Disney (Burbank)   $44.91    \n",
              "4       Marissa A. Mayer                     Yahoo! (Sunnyvale)   $35.98    \n",
              "5           Marc Benioff         salesforce.com (San Francisco)   $33.36    \n",
              "...                  ...                                    ...       ...   \n",
              "98    Gregory N. Roberts  A-Mark Precious Metals (Santa Monica)    $0.94    \n",
              "99       Jose L. Laparte                 PriceSmart (San Diego)    $0.81    \n",
              "100          Jack Dorsey                Twitter (San Francisco)    $0.07    \n",
              "101         Elon R. Musk               Tesla Motors (Palo Alto)    $0.04    \n",
              "102     Lawrence Page***               Alphabet (Mountain View)    $0.00    \n",
              "\n",
              "                % Change Cash Pay Equity Pay Other Pay  \\\n",
              "Rank                                                     \n",
              "1     (No previous year)   $0.95     $52.27     $0.02    \n",
              "2     (No previous year)   $0.95     $52.27     $0.02    \n",
              "3                    -3%  $24.89     $17.28     $2.74    \n",
              "4                   -15%   $1.00     $34.43     $0.55    \n",
              "5                   -16%   $4.65     $27.26     $1.45    \n",
              "...                  ...      ...        ...       ...   \n",
              "98                  -11%   $0.93      $0.00     $0.02    \n",
              "99                   -7%   $0.71      $0.00     $0.10    \n",
              "100   (No previous year)   $0.00      $0.00     $0.07    \n",
              "101                   6%   $0.04      $0.00     $0.00    \n",
              "102                   0%   $0.00      $0.00     $0.00    \n",
              "\n",
              "      Ratio of CEO pay to average industry worker pay  \n",
              "Rank                                                   \n",
              "1                                           362.00000  \n",
              "2                                           362.00000  \n",
              "3                                           477.00000  \n",
              "4                                           342.00000  \n",
              "5                                           338.00000  \n",
              "...                                               ...  \n",
              "98                                           17.00000  \n",
              "99                                           32.00000  \n",
              "100                                           0.63000  \n",
              "101                                           0.46000  \n",
              "102                                           0.00001  \n",
              "\n",
              "[102 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-55b5b8f0-b3db-428f-aa7b-0022a5436d62\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Company (Headquarters)</th>\n",
              "      <th>Total Pay</th>\n",
              "      <th>% Change</th>\n",
              "      <th>Cash Pay</th>\n",
              "      <th>Equity Pay</th>\n",
              "      <th>Other Pay</th>\n",
              "      <th>Ratio of CEO pay to average industry worker pay</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rank</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Mark V. Hurd*</td>\n",
              "      <td>Oracle (Redwood City)</td>\n",
              "      <td>$53.25</td>\n",
              "      <td>(No previous year)</td>\n",
              "      <td>$0.95</td>\n",
              "      <td>$52.27</td>\n",
              "      <td>$0.02</td>\n",
              "      <td>362.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Safra A. Catz*</td>\n",
              "      <td>Oracle (Redwood City)</td>\n",
              "      <td>$53.24</td>\n",
              "      <td>(No previous year)</td>\n",
              "      <td>$0.95</td>\n",
              "      <td>$52.27</td>\n",
              "      <td>$0.02</td>\n",
              "      <td>362.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Robert A. Iger</td>\n",
              "      <td>Walt Disney (Burbank)</td>\n",
              "      <td>$44.91</td>\n",
              "      <td>-3%</td>\n",
              "      <td>$24.89</td>\n",
              "      <td>$17.28</td>\n",
              "      <td>$2.74</td>\n",
              "      <td>477.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Marissa A. Mayer</td>\n",
              "      <td>Yahoo! (Sunnyvale)</td>\n",
              "      <td>$35.98</td>\n",
              "      <td>-15%</td>\n",
              "      <td>$1.00</td>\n",
              "      <td>$34.43</td>\n",
              "      <td>$0.55</td>\n",
              "      <td>342.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Marc Benioff</td>\n",
              "      <td>salesforce.com (San Francisco)</td>\n",
              "      <td>$33.36</td>\n",
              "      <td>-16%</td>\n",
              "      <td>$4.65</td>\n",
              "      <td>$27.26</td>\n",
              "      <td>$1.45</td>\n",
              "      <td>338.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>Gregory N. Roberts</td>\n",
              "      <td>A-Mark Precious Metals (Santa Monica)</td>\n",
              "      <td>$0.94</td>\n",
              "      <td>-11%</td>\n",
              "      <td>$0.93</td>\n",
              "      <td>$0.00</td>\n",
              "      <td>$0.02</td>\n",
              "      <td>17.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>Jose L. Laparte</td>\n",
              "      <td>PriceSmart (San Diego)</td>\n",
              "      <td>$0.81</td>\n",
              "      <td>-7%</td>\n",
              "      <td>$0.71</td>\n",
              "      <td>$0.00</td>\n",
              "      <td>$0.10</td>\n",
              "      <td>32.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>Jack Dorsey</td>\n",
              "      <td>Twitter (San Francisco)</td>\n",
              "      <td>$0.07</td>\n",
              "      <td>(No previous year)</td>\n",
              "      <td>$0.00</td>\n",
              "      <td>$0.00</td>\n",
              "      <td>$0.07</td>\n",
              "      <td>0.63000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>101</th>\n",
              "      <td>Elon R. Musk</td>\n",
              "      <td>Tesla Motors (Palo Alto)</td>\n",
              "      <td>$0.04</td>\n",
              "      <td>6%</td>\n",
              "      <td>$0.04</td>\n",
              "      <td>$0.00</td>\n",
              "      <td>$0.00</td>\n",
              "      <td>0.46000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>Lawrence Page***</td>\n",
              "      <td>Alphabet (Mountain View)</td>\n",
              "      <td>$0.00</td>\n",
              "      <td>0%</td>\n",
              "      <td>$0.00</td>\n",
              "      <td>$0.00</td>\n",
              "      <td>$0.00</td>\n",
              "      <td>0.00001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>102 rows √ó 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55b5b8f0-b3db-428f-aa7b-0022a5436d62')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-55b5b8f0-b3db-428f-aa7b-0022a5436d62 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-55b5b8f0-b3db-428f-aa7b-0022a5436d62');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c9d5907b-46a2-420c-af24-b0e66c36b8c3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c9d5907b-46a2-420c-af24-b0e66c36b8c3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c9d5907b-46a2-420c-af24-b0e66c36b8c3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_fc66ec86-bca4-414c-8440-c0fc835c3ad1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('raw_compensation')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fc66ec86-bca4-414c-8440-c0fc835c3ad1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('raw_compensation');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "raw_compensation",
              "summary": "{\n  \"name\": \"raw_compensation\",\n  \"rows\": 102,\n  \"fields\": [\n    {\n      \"column\": \"Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29,\n        \"min\": 1,\n        \"max\": 102,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          31,\n          68,\n          63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 102,\n        \"samples\": [\n          \"Walter W. Bettinger\",\n          \"Peter T. Dameris\",\n          \"Gregg J. Mollins\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company (Headquarters)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"TRI Pointe Group (Irvine)\",\n          \"NetApp (Sunnyvale)\",\n          \"Skechers U.S.A. (Manhattan Beach)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total Pay\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"$4.47 \",\n          \"$9.39 \",\n          \"$7.12 \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% Change\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 58,\n        \"samples\": [\n          \"(No previous year)\",\n          \"27%\",\n          \"-14%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cash Pay\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 90,\n        \"samples\": [\n          \"$1.13 \",\n          \"$3.64 \",\n          \"$1.03 \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Equity Pay\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 85,\n        \"samples\": [\n          \"$3.50 \",\n          \"$52.27 \",\n          \"$1.00 \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Other Pay\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 41,\n        \"samples\": [\n          \"$2.28 \",\n          \"$0.06 \",\n          \"$0.49 \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ratio of CEO pay to average industry worker pay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.41184060131626,\n        \"min\": 1e-05,\n        \"max\": 554.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          157.0,\n          362.0,\n          98.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 100
        }
      ],
      "source": [
        "raw_compensation = pd.read_csv('https://raw.githubusercontent.com/dsc-courses/dsc10-2023-wi/main/labs/lab02/data/raw_compensation.csv').set_index('Rank')\n",
        "raw_compensation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hbmP6gK_i9Sn"
      },
      "source": [
        "Queremos calcular a m√©dia dos sal√°rios dos CEOs. Tente executar a c√©lula abaixo. üö® Quando terminar, n√£o se esque√ßa de comentar."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 175,
      "metadata": {
        "tags": [
          "raises-exception"
        ],
        "id": "-PvBDeVzi9So"
      },
      "outputs": [],
      "source": [
        "# Ap√≥s rodar essa c√©lula e observar o erro, comente-a para que o erro n√£o se repita ao executar o notebook todo!\n",
        "\n",
        "#raw_compensation.get(\"Total Pay\").mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z3yC8Lf1i9So"
      },
      "source": [
        "Voc√™ dever√° ver um erro. Vamos examinar por que esse erro ocorreu observando os valores na coluna `'Total Pay'`.\n",
        "\n",
        "**Pergunta 2.1.** Use a fun√ß√£o `type` para definir `total_pay_type` como o tipo do primeiro item da coluna `'Total Pay'`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 176,
      "metadata": {
        "id": "6xaXqqw_i9So",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4288ffe-9bde-4939-ce92-675fd6ba9591"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 176
        }
      ],
      "source": [
        "total_pay_type = type('Total Pay')\n",
        "total_pay_type"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "78S0wIVzi9Sp"
      },
      "source": [
        "**Pergunta 2.2.** Voc√™ deve ter descoberto que os valores na coluna `'Total Pay'` s√£o strings (texto). N√£o faz sentido calcular a m√©dia dos valores do texto, ent√£o precisamos convert√™-los em n√∫meros se quisermos fazer isso. Extraia o primeiro valor na coluna `'Total Pay'`. √â o sal√°rio de 2015 de Mark Hurd, um dos dois CEOs da Oracle em 2015, em *milh√µes* de d√≥lares. Chame-o de `mark_hurd_pay_string`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 177,
      "metadata": {
        "id": "Yc8yNbY_i9Sp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "d640af80-85c3-40f0-ecb3-a62cd919e43c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'$53.25 '"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 177
        }
      ],
      "source": [
        "mark_hurd_pay_string = raw_compensation.get('Total Pay').iloc[0]\n",
        "mark_hurd_pay_string"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EzkLdEVPi9Sq"
      },
      "source": [
        "**Pergunta 2.3.** Usando c√≥digo, converta `mark_hurd_pay_string` em um n√∫mero de *d√≥lares* e armazene o resultado na vari√°vel `mark_hurd_pay`, que deve ser um float.\n",
        "- O m√©todo string `strip` ser√° √∫til para remover o cifr√£o; remove um caractere especificado do in√≠cio ou final de uma string. Por exemplo, o valor de `\"100%\".strip(\"%\")` √© a string `\"100\"`.\n",
        "- Voc√™ tamb√©m precisar√° da fun√ß√£o `float`, que converte uma string que se parece com um n√∫mero em um n√∫mero real.\n",
        "- Por √∫ltimo, lembre-se que a resposta deve ser em d√≥lares, e n√£o em milh√µes de d√≥lares."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 173,
      "metadata": {
        "id": "0DWDp38Mi9Sr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fa505c0e-f334-49ef-d7f0-74e01ba87fd4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "53250000.0"
            ]
          },
          "metadata": {},
          "execution_count": 173
        }
      ],
      "source": [
        "mark_hurd_pay = float(mark_hurd_pay_string.strip('$')) * 1000000\n",
        "mark_hurd_pay"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KHaAXEUSi9Sr"
      },
      "source": [
        "Para calcular o sal√°rio m√©dio, precisamos fazer isso para cada CEO. Mas parece que isso envolveria copiar esse c√≥digo 102 vezes... N√£o, obrigado! üôÖ\n",
        "\n",
        "√â aqui que entram as fun√ß√µes. Suponha que em vez de `mark_hurd_pay_string`, tiv√©ssemos uma vari√°vel chamada `some_pay_string`, formatada da mesma forma que `mark_hurd_pay_string`, com um cifr√£o seguido por um valor. Agora que fizemos isso para `mark_hurd_pay_string`, poder√≠amos usar essencialmente o mesmo c√≥digo em `some_pay_string` para extrair o pagamento como um n√∫mero de d√≥lares. Voc√™ s√≥ precisa alterar `mark_hurd_pay_string` em seu c√≥digo para `some_pay_string`.\n",
        "\n",
        "**Pergunta 2.4.** Dentro da fun√ß√£o abaixo, digite a palavra `return` (que deve ficar verde), depois copie a express√£o que voc√™ usou para calcular `mark_hurd_pay`, mas substitua o `mark_hurd_pay_string` espec√≠fico pelo gen√©rico `some_pay_string` ."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 169,
      "metadata": {
        "for_assignment_type": "student",
        "id": "lhCXRG10i9Sr"
      },
      "outputs": [],
      "source": [
        "def convert_pay_string_to_number(some_pay_string):\n",
        "    \"\"\"Converte uma string como '$100' (em milh√µes) para um n√∫mero em d√≥lares.\"\"\"\n",
        "    return float(some_pay_string.strip('$')) * 1000000"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pDEoiD5di9Sr"
      },
      "source": [
        "Aqui, definimos uma nova fun√ß√£o, dando um nome √† express√£o que converte strings `'Total Pay'` em valores num√©ricos. Esta fun√ß√£o pode converter qualquer string com o formato correto (como \"$100\") em um n√∫mero que representa milh√µes de d√≥lares. Posteriormente neste laborat√≥rio, veremos o resultado: podemos chamar (usar) essa fun√ß√£o em cada string de pagamento no conjunto de dados de uma s√≥ vez."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VKuXNzrdi9Sr"
      },
      "source": [
        "Podemos chamar nossa fun√ß√£o da mesma forma que chamamos as fun√ß√µes \"built-in\" que vimos. Ela leva um argumento, uma string, e retorna um n√∫mero."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 170,
      "metadata": {
        "id": "b-2xbmlDi9Ss",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c43a0b4f-9271-40fa-ce1b-28a11c43f070"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "42000000.0"
            ]
          },
          "metadata": {},
          "execution_count": 170
        }
      ],
      "source": [
        "convert_pay_string_to_number('$42')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 171,
      "metadata": {
        "id": "g2_lr6j7i9Ss",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7894b283-0923-4cc5-b122-2e720e393e4c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "53250000.0"
            ]
          },
          "metadata": {},
          "execution_count": 171
        }
      ],
      "source": [
        "convert_pay_string_to_number(mark_hurd_pay_string)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 172,
      "metadata": {
        "id": "1rVFDdCui9Ss",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dcb8b41d-941c-436f-c51b-a29477ccd4f1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "53240000.0"
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ],
      "source": [
        "# Tamb√©m podemos computar o pagamento de Safra Catzs da mesma forma:\n",
        "convert_pay_string_to_number(raw_compensation.get('Total Pay').iloc[1])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O8tUeYE-i9Ss"
      },
      "source": [
        "O que ganhamos? Bem, sem a fun√ß√£o, ter√≠amos que copiar aquele material `float(some_pay_string.strip(\"$\")) * 1000000` **cada vez** que quis√©ssemos converter uma string de pagamento. Agora chamamos apenas uma fun√ß√£o cujo nome diz exatamente o que est√° fazendo.\n",
        "\n",
        "Em breve, veremos como aplicar esta fun√ß√£o a cada string de pagamento com uma √∫nica express√£o. Primeiro, vamos aprender mais algumas fun√ß√µes."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N-3bBABbi9Ss"
      },
      "source": [
        "## 3. Definindo Fun√ß√µes ‚ûó\n",
        "\n",
        "Vamos escrever uma fun√ß√£o muito simples que converte uma propor√ß√£o em uma porcentagem multiplicando-a por 100. Por exemplo, o valor de `to_percentage(0.5)` deve ser o n√∫mero 50. (Sem sinal de porcentagem).\n",
        "\n",
        "Uma defini√ß√£o de fun√ß√£o possui algumas partes.\n",
        "\n",
        "#### `def`\n",
        "Sempre come√ßa com `def` (abrevia√ß√£o de **def**ine):\n",
        "\n",
        "    def\n",
        "\n",
        "#### Nome\n",
        "Em seguida vem o nome da fun√ß√£o. Vamos chamar nossa fun√ß√£o de `to_percentage`.\n",
        "\n",
        "    def to_percentage\n",
        "\n",
        "#### Assinatura\n",
        "\n",
        "Em seguida vem algo chamado *assinatura* da fun√ß√£o. Isso informa ao Python quantos *argumentos* sua fun√ß√£o deve ter e quais nomes voc√™ usar√° para se referir a esses argumentos no c√≥digo da fun√ß√£o. `to_percentage` deve receber um argumento, e chamaremos esse argumento de `propor√ß√£o`, pois deve ser uma propor√ß√£o.\n",
        "\n",
        "    def to_percentage(proportion)\n",
        "\n",
        "Colocamos dois pontos ap√≥s a assinatura para informar ao Python que acabou.\n",
        "\n",
        "    def to_percentage(proportion):\n",
        "\n",
        "##### Documenta√ß√£o\n",
        "Fun√ß√µes podem fazer coisas complicadas, ent√£o **voc√™ deve escrever uma explica√ß√£o do que sua fun√ß√£o faz**. Para fun√ß√µes pequenas, isso √© menos importante, mas √© um bom h√°bito aprender desde o in√≠cio. Convencionalmente, as fun√ß√µes Python s√£o documentadas escrevendo uma string entre aspas triplas:\n",
        "\n",
        "    def to_percentage(proportion):\n",
        "    \"\"\"Converte uma propor√ß√£o em porcentagem.\"\"\"\n",
        "\n",
        "\n",
        "##### Corpo\n",
        "Agora come√ßamos a escrever o c√≥digo que √© executado quando a fun√ß√£o √© chamada. Isso √© chamado de *corpo* da fun√ß√£o. Podemos escrever qualquer coisa que escrever√≠amos em qualquer outro lugar. Primeiro, vamos dar um nome ao n√∫mero pelo qual multiplicamos uma propor√ß√£o para obter uma porcentagem.\n",
        "\n",
        "    def to_percentage(proportion):\n",
        "    \"\"\"Converte uma propor√ß√£o em porcentagem.\"\"\"\n",
        "    fator = 100\n",
        "\n",
        "##### `return`\n",
        "A instru√ß√£o especial `return` no corpo de uma fun√ß√£o diz ao Python para tornar o valor da chamada de fun√ß√£o igual ao que vem logo ap√≥s `return`. A instru√ß√£o return tamb√©m *termina a fun√ß√£o* e uma vez chamada *nenhuma linha no corpo ap√≥s ser√° executada*. Ent√£o, queremos que o valor de `to_percentage(0.5)` seja a propor√ß√£o 0.5 vezes o fator 100, ent√£o escrevemos:\n",
        "\n",
        "    def to_percentage(proportion):\n",
        "    \"\"\"Converte uma propor√ß√£o em porcentagem.\"\"\"\n",
        "    fator = 100\n",
        "    return proportion * fator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EwH3HbLii9Ss"
      },
      "source": [
        "**Quest√£o 3.1.** Defina a fun√ß√£o `to_percentage` na c√©lula abaixo. Chame sua fun√ß√£o para converter a propor√ß√£o `0.2` em uma porcentagem. Nomeie essa porcentagem como `vinte_percent`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "for_assignment_type": "student",
        "id": "VwhCIti1i9Ss"
      },
      "outputs": [],
      "source": [
        "def to_percentage(proportion):\n",
        "    \"\"\" Converte uma propor√ß√£o para porcentagem \"\"\"\n",
        "    ..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "voFl03jki9St"
      },
      "outputs": [],
      "source": [
        "twenty_percent = ...\n",
        "twenty_percent"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uUayO4lZi9St"
      },
      "source": [
        "Assim como as fun√ß√µes integradas, voc√™ pode passar nomes de vari√°veis ‚Äã‚Äãcomo argumentos para sua fun√ß√£o.\n",
        "\n",
        "**Pergunta 3.2.** Use `to_percentage` novamente para converter a propor√ß√£o chamada `a_proportion` (definida abaixo) em uma porcentagem chamada `a_percentage`.\n",
        "\n",
        "*Nota:* Voc√™ n√£o precisa definir `to_percentage` novamente! Assim como outras coisas nomeadas, as fun√ß√µes permanecem depois que voc√™ as define."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f9TLbPTti9St"
      },
      "outputs": [],
      "source": [
        "a_proportion = 2**(0.5) / 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S2A5la6Ci9St"
      },
      "outputs": [],
      "source": [
        "a_percentage = ...\n",
        "a_percentage"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F6PMmkmri9St"
      },
      "source": [
        "Aqui est√° um fato importante sobre fun√ß√µes: os nomes de vari√°veis ‚Äã‚Äãatribu√≠dos dentro do corpo de uma fun√ß√£o s√≥ s√£o acess√≠veis dentro do corpo dessa fun√ß√£o. Assim que a fun√ß√£o retornar, esses nomes desaparecer√£o. Portanto, mesmo que voc√™ tenha definido `factor = 100` dentro de `to_percentage` acima e depois chamado `to_percentage`, o nome da vari√°vel `factor` n√£o tem significado fora do corpo de `to_percentage`.\n",
        "\n",
        "Para mostrar o que queremos dizer, execute a c√©lula a seguir. **Isso causa um erro intencionalmente**. üö® Quando terminar, comente-a."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [
          "raises-exception"
        ],
        "id": "2gBbrrb3i9St"
      },
      "outputs": [],
      "source": [
        "# Voc√™ deve ver um erro ao rodar isso.\n",
        "#(Caso n√£o veja, voc√™ deve ter definido a vari√°vel 'factor' em algum lugar acima)\n",
        "\n",
        "factor"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yQ5DVDpfi9Su"
      },
      "source": [
        "Se quis√©ssemos, poder√≠amos definir uma nova vari√°vel com o nome `factor` fora da defini√ß√£o de `to_percentage`, e ela poderia ter qualquer valor que quis√©ssemos."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XXzrBM6ai9Su"
      },
      "source": [
        "Como vimos com as fun√ß√µes integradas, as fun√ß√µes tamb√©m podem receber strings (ou arrays, ou DataFrames) como argumentos e tamb√©m podem retornar essas coisas.\n",
        "\n",
        "**Quest√£o 3.3.** Defina uma fun√ß√£o chamada `disemvowel`. Deve receber uma √∫nica string como argumento. (Voc√™ pode chamar esse argumento como quiser.) Ele deve retornar uma c√≥pia dessa string, mas com todos os caracteres que s√£o vogais removidos. Voc√™ pode assumir que `disemvowel` s√≥ ser√° chamado em strings min√∫sculas, o que significa que voc√™ s√≥ precisa se livrar das vogais min√∫sculas\n",
        ". (Em ingl√™s, as vogais s√£o os caracteres \"a\", \"e\", \"i\", \"o\" e \"u\".)\n",
        "\n",
        "*Dica:* Para remover todos os \"a\"s de uma string, voc√™ pode usar `that_string.replace(\"a\", \"\")`. E voc√™ pode chamar `replace` v√°rias vezes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "heDPGcafi9Su"
      },
      "outputs": [],
      "source": [
        "def disemvowel(a_string):\n",
        "    ...\n",
        "\n",
        "# Um exemplo de chamada da sua fun√ß√£o. (Muitas vezes √© √∫til rodar uma chamada de exemplo de tempos em tempos,\n",
        "#conforme voc√™ vai escrevendo sua fun√ß√£o, para saber como ela est√° se comportando.)\n",
        "\n",
        "disemvowel(\"voce pode ler isso sem vogais?\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i6-_wRL9i9Su"
      },
      "source": [
        "##### Chamadas em chamadas em chamadas\n",
        "Assim como voc√™ escreve uma s√©rie de linhas para construir um c√°lculo complexo, √© √∫til definir uma s√©rie de pequenas fun√ß√µes que se complementam. Como voc√™ pode escrever qualquer c√≥digo dentro do corpo de uma fun√ß√£o, voc√™ pode chamar outras fun√ß√µes que escreveu.\n",
        "\n",
        "Se uma fun√ß√£o √© como uma receita, definir uma fun√ß√£o em termos de outras fun√ß√µes √© como ter uma receita de bolo üç∞ dizendo para voc√™ seguir outra receita para fazer a cobertura e outra para fazer o recheio. Isso torna a receita do bolo mais curta e clara e evita um monte de receitas de glac√™ duplicadas. √â a base da programa√ß√£o produtiva.\n",
        "\n",
        "Por exemplo, suponha que voc√™ queira contar o n√∫mero de caracteres *que n√£o s√£o vogais* em um trecho de texto. Uma maneira de fazer isso √© remover todas as vogais e contar o tamanho da string restante.\n",
        "\n",
        "**Quest√£o 3.4.** Escreva uma fun√ß√£o chamada `num_non_vowels`. Deve receber uma string como argumento e retornar um n√∫mero. O n√∫mero deve ser o n√∫mero de caracteres na sequ√™ncia do argumento que n√£o s√£o vogais. Novamente, voc√™ pode assumir que `num_non_vowels` s√≥ ser√° chamado em strings min√∫sculas.\n",
        "\n",
        "*Dica:* A fun√ß√£o `len` pega uma string como argumento e retorna o n√∫mero de caracteres nela."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dUIKbfO7i9Su"
      },
      "outputs": [],
      "source": [
        "def num_non_vowels(a_string):\n",
        "    \"\"\"Retorna o n√∫mero de caracteres que n√£o s√£o vogais em uma string.\"\"\"\n",
        "    ..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JH-siRAgi9Su"
      },
      "source": [
        "As fun√ß√µes tamb√©m podem encapsular c√≥digo que *faz coisas* em vez de apenas calcular valores. Por exemplo, se voc√™ chamar `print` dentro de uma fun√ß√£o e depois, ao chamar essa fun√ß√£o, algo ser√° impresso.\n",
        "\n",
        "O conjunto de dados `movies_by_year` nas notas do curso cont√©m informa√ß√µes sobre as vendas de filmes nos √∫ltimos anos. Suponha que voc√™ queira exibir o ano com o quinto maior total de vendas brutas de filmes, impresso de forma leg√≠vel. Voc√™ pode fazer isso:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lSeYcoW0i9Su"
      },
      "outputs": [],
      "source": [
        "movies_by_year = pd.read_csv(\"https://raw.githubusercontent.com/dsc-courses/dsc10-2023-wi/main/labs/lab02/data/movies_by_year.csv\").set_index('Year')\n",
        "rank = 5\n",
        "fifth_from_top_movie_year = movies_by_year.sort_values(by='Total Gross', ascending=False).index[rank-1]\n",
        "\n",
        "print(\"Ano de n√∫mero\", rank, \"com o maior n√∫mero de vendas brutas foi\", fifth_from_top_movie_year)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gURLRnfpi9Sv"
      },
      "source": [
        "Depois de escrever isso, voc√™ percebe que tamb√©m queria imprimir o 2¬∫ e o 3¬∫ anos mais altos. Em vez de copiar seu c√≥digo, voc√™ decide coloc√°-lo em uma fun√ß√£o. Como a classifica√ß√£o varia, voc√™ faz disso um argumento para sua fun√ß√£o.\n",
        "\n",
        "**Pergunta 3.5.** Escreva uma fun√ß√£o chamada `print_kth_top_movie_year`. Deve levar um √∫nico argumento, a classifica√ß√£o do ano (como 2, 3 ou 5 nos exemplos acima). Deve imprimir uma mensagem como a acima. N√£o deveria ter uma instru√ß√£o `return`, porque queremos que a fun√ß√£o seja impressa, n√£o retorne."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "for_assignment_type": "student",
        "id": "rnllwBypi9Sv"
      },
      "outputs": [],
      "source": [
        "def print_kth_top_movie_year(k):\n",
        "    ..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J16OQXHxi9Sv"
      },
      "outputs": [],
      "source": [
        "# Exemplos de chamadas para sua fun√ß√£o\n",
        "print_kth_top_movie_year(2)\n",
        "print_kth_top_movie_year(3)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M_LbmVswi9Sv"
      },
      "source": [
        "## 4. Aplicando Fun√ß√µes ü©π\n",
        "\n",
        "Definir uma fun√ß√£o √© como dar um nome a um valor com `=`. Na verdade, uma fun√ß√£o √© um valor exatamente como o n√∫mero 1 ou a string `\"hey\"`!\n",
        "\n",
        "Por exemplo, podemos criar um novo nome para a fun√ß√£o integrada `max` se quisermos:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RzBqLf00i9Sv"
      },
      "outputs": [],
      "source": [
        "the_largest_of = max\n",
        "the_largest_of(2, 6)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2EIfgKnti9Sv"
      },
      "source": [
        "O antigo nome de `max` ainda existe:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kovYwPqni9Sv"
      },
      "outputs": [],
      "source": [
        "max(2, 6)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w4W1t-mwi9Sv"
      },
      "source": [
        "Tente apenas escrever `max` ou `the_largest_of` (ou o nome de qualquer outra fun√ß√£o) em uma c√©lula e execute essa c√©lula. Python imprimir√° uma descri√ß√£o (muito breve) da fun√ß√£o."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nGgj1Vxni9Sv"
      },
      "outputs": [],
      "source": [
        "max"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hkmxvl17i9Sv"
      },
      "source": [
        "Por que isso √© √∫til? Como as fun√ß√µes s√£o apenas valores, √© poss√≠vel pass√°-las como argumentos para outras fun√ß√µes. Aqui est√° um exemplo simples, mas n√£o t√£o pr√°tico: podemos fazer um array de fun√ß√µes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wz3XsZ72i9Sv"
      },
      "outputs": [],
      "source": [
        "np.array([max, np.average, type])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SSVtirgNi9Sw"
      },
      "source": [
        "**Pergunta 4.1.** Fa√ßa um array contendo quaisquer outras 3 fun√ß√µes que voc√™ tenha visto. Chame-o de `some_functions`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "E_HWZEiSi9Sw"
      },
      "outputs": [],
      "source": [
        "some_functions = ...\n",
        "some_functions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gZvUsuqIi9Sw"
      },
      "source": [
        "Trabalhar com fun√ß√µes como valores pode levar a c√≥digos de apar√™ncia engra√ßada. Por exemplo, veja se voc√™ consegue descobrir como esta linha de c√≥digo funciona:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XI_4CrPqi9Sw"
      },
      "outputs": [],
      "source": [
        "np.array([max, np.average, type])[0](4, -2, 7)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E1eU45aii9Sw"
      },
      "source": [
        "Aqui est√° um exemplo mais simples que √© realmente √∫til: o m√©todo Series `apply`.\n",
        "`apply` chama uma fun√ß√£o muitas vezes, uma vez em *cada* elemento de uma S√©rie, que normalmente vem de uma coluna de um DataFrame. Ele produz uma s√©rie de resultados, que podemos querer adicionar a um DataFrame.\n",
        "\n",
        "Aqui est√° um exemplo. Lembre-se que a coluna `'Total Pay'` do DataFrame `raw_compensation` continha strings:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JxpPhlWhi9Sw"
      },
      "outputs": [],
      "source": [
        "raw_compensation.get(\"Total Pay\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-EsOKJayi9Sw"
      },
      "source": [
        "Escrevemos uma fun√ß√£o, `convert_pay_string_to_number`, que converte uma dessas strings em um n√∫mero.\n",
        "Aqui usamos `apply` para converter o pagamento de cada CEO em um n√∫mero, usando a fun√ß√£o que voc√™ definiu:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xIbOjKimi9Sw"
      },
      "source": [
        "Aqui est√° uma ilustra√ß√£o do que isso fez:\n",
        "\n",
        "<img src=\"https://raw.githubusercontent.com/dsc-courses/dsc10-2023-wi/main/labs/lab02/data/apply.png\" width=700/>\n",
        "\n",
        "Observe que n√£o escrevemos algo como `convert_pay_string_to_number()` ou `convert_pay_string_to_number(\"Total Pay\")`. A fun√ß√£o de `apply` √© chamar a fun√ß√£o que atribu√≠mos a ele, ent√£o, em vez de chamarmos n√≥s mesmos `convert_pay_string_to_number`, apenas escrevemos seu nome como um argumento para `apply`.\n",
        "\n",
        "**Quest√£o 4.2.** Usando `apply`, fa√ßa um DataFrame que seja uma c√≥pia de `raw_compensation` com mais uma coluna chamada `'Total_Pay_Dollars'`. Deve ser o resultado da aplica√ß√£o de `convert_pay_string_to_number` √† coluna `'Total Pay'`, como fizemos acima. Chame o novo DataFrame de `compensation`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9CVnQnUJi9Sw"
      },
      "outputs": [],
      "source": [
        "compensation = ...\n",
        "compensation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ufLMgxkUi9Sw"
      },
      "source": [
        "Agora que temos o pagamento em n√∫meros, podemos realizar opera√ß√µes aritm√©ticas (e, como resultado, calcular resumos num√©ricos) sobre os valores dos sal√°rios.\n",
        "\n",
        "**Pergunta 4.3.** Calcule o sal√°rio total m√©dio dos CEOs no conjunto de dados."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HfNlakwKi9Sx"
      },
      "outputs": [],
      "source": [
        "average_total_pay = ...\n",
        "average_total_pay"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U2_MiOFwi9Sx"
      },
      "source": [
        "**Pergunta 4.4.** As empresas pagam os executivos de diversas maneiras: diretamente em dinheiro; concedendo a√ß√µes ou outro ‚Äúcapital‚Äù da empresa; ou com benef√≠cios acess√≥rios (como jatos particulares ‚úàÔ∏è). Calcule a propor√ß√£o do sal√°rio de cada CEO que era em dinheiro. (Sua resposta deve ser uma s√©rie.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "fM6YYuPIi9Sx"
      },
      "outputs": [],
      "source": [
        "cash_proportion = ...\n",
        "cash_proportion"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HzKzS898i9Sx"
      },
      "source": [
        "Observe atentamente o resultado. A √∫ltima linha tem um valor estranho, `NaN`. `NaN` significa \"n√£o √© um n√∫mero\".\n",
        "\n",
        "<img width=500 src=\"https://raw.githubusercontent.com/dsc-courses/dsc10-2023-wi/main/labs/lab02/data/nan.png\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BXUQBRrhi9Sx"
      },
      "source": [
        "Vejamos as √∫ltimas linhas do DataFrame:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "u9HFLnHzi9Sx"
      },
      "outputs": [],
      "source": [
        "compensation.take(np.arange(-5, 0))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y8gYcr-qi9Sx"
      },
      "source": [
        "Notou algo estranho?\n",
        "\n",
        "**Pergunta 4.5.** Por que obtivemos o `NaN`? Atribua 1, 2, 3 ou 4 ao nome `apply_part5` abaixo.\n",
        "1. A propor√ß√£o seria 0. Python s√≥ pode calcular n√∫meros diferentes de zero.\n",
        "2. A `'Propor√ß√£o entre o sal√°rio do CEO e o sal√°rio m√©dio do trabalhador da ind√∫stria'` √© arredondado para 0, o que o Python n√£o sabe como lidar.\n",
        "3. O c√°lculo √© dividido por 0, portanto o resultado n√£o √© um n√∫mero."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "X06b-SaBi9Sy"
      },
      "outputs": [],
      "source": [
        "apply_part5 = ..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RnH5t9xri9Sy"
      },
      "source": [
        "Muitos dados reais s√£o confusos. Pode conter zeros, valores vazios ou `NaN`'s (n√£o-um-n√∫mero) que precisamos observar ao realizar c√°lculos!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "thWJzdHOi9Sy"
      },
      "source": [
        "Tudo bem, de volta aos nossos CEOs. Confira a coluna `'% Change'` em `compensation`. Mostra o aumento percentual na remunera√ß√£o do CEO em rela√ß√£o ao ano anterior. Para CEOs sem nenhum ano anterior registrado, em vez disso diz `'(No previous year)'`. Os valores nesta coluna s√£o *strings*, n√£o n√∫meros, portanto, assim como a coluna `'Total Pay'`, ela n√£o pode ser usada sem um pouco de trabalho extra.\n",
        "\n",
        "Dado o seu sal√°rio atual e o aumento percentual em rela√ß√£o ao ano anterior, voc√™ pode calcular o sal√°rio do ano anterior. O sal√°rio deste ano e o sal√°rio do ano passado est√£o relacionados pela f√≥rmula:\n",
        "\n",
        "$$\\text{sal√°rio deste ano} = \\text{sal√°rio do ano passado} \\cdot \\left(1+\\dfrac{\\text{aumento percentual}}{100}\\right)$$\n",
        "\n",
        "Por exemplo, se voc√™ ganhou \\$600 no ano passado e seu sal√°rio aumentou 50\\%, ent√£o\n",
        "\n",
        "$$\\begin{align}\n",
        "\\text{pagamento deste ano} &= \\text{600} \\cdot \\left(1+\\dfrac{\\text{50}}{100}\\right)\\\\\n",
        "&= \\text{600} \\cdot (1.5) \\\\\n",
        "&= 900\n",
        "\\end{align}$$\n",
        "\n",
        "Como sabemos como o sal√°rio deste ano e o sal√°rio do ano passado est√£o matematicamente relacionados, podemos resolver esta equa√ß√£o para o sal√°rio do ano passado para fornecer uma f√≥rmula para o sal√°rio do ano anterior se conhecermos o sal√°rio do ano atual e o aumento percentual do ano anterior para o ano atual. Fazendo um pouco de √°lgebra, encontramos:\n",
        "\n",
        "$$\\text{sal√°rio do ano passado} = \\dfrac{\\text{sal√°rio deste ano}}{\\left(1+\\dfrac{\\text{aumento percentual}}{100}\\right)}$$\n",
        "\n",
        "**Pergunta 4.6.** Crie um novo DataFrame chamado `with_previous_compensation`. Deve ser uma c√≥pia de `compensation`, mas com os CEOs `'(No previous year)'` filtrados, e com uma coluna extra chamada `'Previous_Total_Pay'`. Essa coluna deve conter o sal√°rio de cada CEO em 2014.\n",
        "\n",
        "*Dica 1:* Esta pergunta envolve v√°rios passos, mas cada um envolve algo que voc√™ j√° aprendeu a fazer. D√™ um passo de cada vez, usando quantas linhas forem necess√°rias. Voc√™ pode imprimir seus resultados ap√≥s cada etapa para ter certeza de que est√° no caminho certo.\n",
        "\n",
        "*Dica 2:* Voc√™ precisar√° definir uma fun√ß√£o para converter strings de porcentagem, como `'-15%'`, em n√∫meros. Voc√™ pode fazer isso logo acima do outro c√≥digo.\n",
        "\n",
        "*Dica 3:* Se voc√™ vir um erro dizendo `unsupported operand type(s) for +: 'int' and 'Series'`, tente mudar a ordem de sua opera√ß√£o. Em vez de escrever algo como `1 + series`, escreva `series + 1`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "for_assignment_type": "student",
        "id": "X7DRVpAIi9Sy"
      },
      "outputs": [],
      "source": [
        "# Voc√™ pode escrever c√≥digos de passos intermedi√°rios aqui!\n",
        "with_previous_compensation = ...\n",
        "with_previous_compensation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6SRQJZgNi9Sy"
      },
      "source": [
        "**Pergunta 4.7.** Qual foi o sal√°rio m√©dio desses CEOs em 2014?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EtgBxQ59i9Sy"
      },
      "outputs": [],
      "source": [
        "average_pay_2014 = ...\n",
        "average_pay_2014"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qHTZFBfPi9Sy"
      },
      "source": [
        "## 5. Distribui√ß√£o de Riqueza üí∞\n",
        "Anteriormente, calculamos a remunera√ß√£o m√©dia entre os CEOs em nosso conjunto de dados de 102 CEOs. No entanto, a m√©dia n√£o nos diz tudo sobre os montantes pagos aos CEO. Talvez apenas alguns CEOs ganhem a maior parte do dinheiro, mesmo entre estes 102.\n",
        "\n",
        "Podemos usar um *histograma de densidade* para exibir mais informa√ß√µes sobre um conjunto de n√∫meros. [Aqui est√° um exemplo](https://dsc10.com/resources/lectures/lec07/lec07.html#Plotting-a-density-histogram) do c√≥digo que usamos para criar histogramas.\n",
        "\n",
        "**Quest√£o 5.1.** Fa√ßa um histograma de densidade da remunera√ß√£o dos CEOs em `compensation`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_pyc1rwOi9Sz"
      },
      "outputs": [],
      "source": [
        "# Coloque seu c√≥digo aqui\n",
        "..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sp4kR_Cvi9Sz"
      },
      "source": [
        "**Pergunta 5.2.** Olhando para o histograma, quantos CEOs ganharam mais de \\$30 milh√µes? Fa√ßa um bom palpite. (Responda √† pergunta preenchendo sua resposta manualmente. Voc√™ ter√° que fazer um pouco de aritm√©tica; sinta-se √† vontade para usar Python como calculadora.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xUX0KdfLi9Sz"
      },
      "outputs": [],
      "source": [
        "num_ceos_more_than_30_million = ..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HiSndxvzi9Sz"
      },
      "source": [
        "**Pergunta 5.3.** Responda a mesma pergunta com c√≥digo. Ou seja, encontre o n√∫mero de CEOs com um sal√°rio total superior a \\$30 milh√µes usando c√≥digo e atribua o resultado ao nome `num_ceos_more_than_30_million_code`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7gOB8eMgi9Sz"
      },
      "outputs": [],
      "source": [
        "num_ceos_more_than_30_million_code = ...\n",
        "num_ceos_more_than_30_million_code"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RHFBSEkKi9Sz"
      },
      "source": [
        "Execute a pr√≥xima c√©lula se quiser ver a que dist√¢ncia voc√™ estava."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gBHbxd0Ji9Sz"
      },
      "outputs": [],
      "source": [
        "percent_diff = abs(num_ceos_more_than_30_million - num_ceos_more_than_30_million_code) / num_ceos_more_than_30_million_code\n",
        "print(f\"Seu chute estava {percent_diff * 100}% errado!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t1k1UpEti9Sz"
      },
      "source": [
        "# Linha de chegada üèÅ\n",
        "\n",
        "Parab√©ns! Voc√™ concluiu o Laborat√≥rio 2.\n",
        "\n",
        "Para enviar sua tarefa:\n",
        "\n",
        "1. Selecione `Kernel -> Reiniciar e executar tudo` para garantir que voc√™ executou todas as c√©lulas, incluindo as c√©lulas de teste.\n",
        "2. Leia o caderno para ter certeza de que est√° tudo bem e que suas respostas foram computadas.\n",
        "3. Baixe seu notebook usando `Arquivo -> Baixar como -> Notebook (.ipynb)` e, em seguida, carregue seu notebook para o Moodle."
      ]
    }
  ],
  "metadata": {
    "anaconda-cloud": {},
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}